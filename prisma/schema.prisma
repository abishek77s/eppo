// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // Using SQLite for simplicity, change as needed (e.g., "postgresql", "mysql")
  url      = "file:./dev.db" // Path to your SQLite database file
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  authoredEvents Event[] @relation("AuthoredEvents") // Events created by this user
  sharedEvents   EventShare[] @relation("SharedWithUser") // Events shared with this user
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? 
  access_token       String? 
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? 
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id              String    @id @default(cuid())
  name            String
  date            DateTime
  location        String
  description     String?
  category        String?   // Assuming category is a string
  image           String?   // URL or path to image
  price           String?   // Assuming price is a string, consider Decimal if calculations are needed

  author          User      @relation("AuthoredEvents", fields: [authorId], references: [id])
  authorId        String
  
  isPublic        Boolean   @default(false) // Can anyone fork this?
  
  // Explicit shares via the EventShare table
  shares EventShare[] @relation("EventShares")

  // Self-relation for forked events
  // onDelete and onUpdate are set to NoAction to prevent cascading issues on deletion of parent events for SQLite.
  forkedFrom      Event?    @relation("EventForks", fields: [forkedFromId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  forkedFromId    String?
  forks           Event[]   @relation("EventForks")

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Persistent positioning fields
  positionX       Float?    // e.g., percentage from left
  positionY       Float?    // e.g., percentage from top
}

// Model for managing explicit event shares
model EventShare {
  id        String   @id @default(cuid())
  event     Event    @relation("EventShares", fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String
  user      User     @relation("SharedWithUser", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  sharedAt  DateTime @default(now())

  @@unique([eventId, userId]) // A user can only have an event shared with them once
}
